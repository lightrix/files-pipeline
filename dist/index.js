import{deepmerge as s}from"deepmerge-ts";import i from"./options/index.js";import p from"./lib/compress/index.js";import r from"./options/lib/compress/index.js";import e from"./lib/critters/index.js";import n from"./options/lib/critters/index.js";class h{options;paths=new Set;mergeDefaultOptions(t){for(const o in this.options)Object.prototype.hasOwnProperty.call(t,o)&&this.options[o]===!0&&(this.options[o]=t[o]);if(this.options=s(t,this.options),typeof this.options.path<"u")if(this.options.path instanceof Array||this.options.path instanceof Set)for(const o of this.options.path)this.paths.add(o);else this.paths.add(this.options.path)}constructor(t={}){return this.options=t,this.mergeDefaultOptions(i),this}async compress(){this.mergeDefaultOptions(r);for(const t of this.paths)await p(t,this.options,this.options.logger);return this}async critters(){this.mergeDefaultOptions(n);for(const t of this.paths)await e(t,this.options,this.options.logger);return this}}export{h as default};
