import*as o from"fs";import{fileURLToPath as u}from"url";import{dirname as p}from"path";import h from"fast-glob";import n from"../options/index.js";import f from"./apply-to.js";import a from"./deepmerge.js";class P{paths=new Map;results=new Map;pipe={files:0,debug:2,info:{},current:{inputPath:"",outputPath:"",fileSizeAfter:0,fileSizeBefore:0,buffer:""}};constructor(t=2){this.pipe.debug=t}async in(t="./"){if(!t)return this;const e=f(f(t,i=>i instanceof URL?u(i):i),i=>i.endsWith("/")?i:`${i}/`);if(e instanceof Map)for(const[i,s]of e)this.paths.set(i,s);else this.paths.set(e,e);return this}async by(t="**/*"){if(!t)return this;for(const[e,i]of this.paths)for(const s of await h(t,{cwd:e,onlyFiles:!0}))this.results.set(`${i}${s}`,`${e}${s}`);return this}not(t){const e=new Set;if(typeof t<"u")if(t instanceof Array||t instanceof Set)for(const i of t)e.add(i);else e.add(t);for(const i of e){if(typeof i=="string")for(const s of this.results)(s[0].match(i)||s[1].match(i))&&this.results.delete(s[0]);if(typeof i=="function")for(const s of this.results)(i(s[0])||i(s[1]))&&this.results.delete(s[0])}return this}async apply(t=n.pipeline){t=a(n.pipeline,t);for(const[e,i]of this.results)try{if(this.pipe.current.inputPath=i,this.pipe.current.outputPath=e,this.pipe.current.fileSizeBefore=(await o.promises.stat(this.pipe.current.inputPath)).size,t.read&&t.wrote){this.pipe.current.buffer=await t.read(this.pipe.current);const s=await t.wrote(this.pipe.current);if(!s)return;if(this.pipe.current.buffer=s,t.passed&&await t.passed(this.pipe.current)){try{await o.promises.access(p(this.pipe.current.outputPath),o.constants.W_OK)}catch{await o.promises.mkdir(p(this.pipe.current.outputPath),{recursive:!0})}if(await o.promises.writeFile(this.pipe.current.outputPath,this.pipe.current.buffer,"utf-8"),this.pipe.current.fileSizeAfter=(await o.promises.stat(this.pipe.current.outputPath)).size,this.pipe.debug>0&&(this.pipe.files++,t.changed&&(this.pipe=await t.changed(this.pipe))),this.pipe.debug>1&&typeof t.accomplished=="function"){const r=await t.accomplished(this.pipe.current);(!r||r.length>0)&&console.log(r)}}}}catch{if(this.results.delete(e),typeof t.failed=="function"){const r=await t.failed(this.pipe.current);(!r||r.length>0)&&console.log(r)}}if(this.pipe.debug>0&&this.results.size>0&&typeof t.fulfilled=="function"){const e=await t.fulfilled(this.pipe);(!e||e.length>0)&&console.log(e)}return this}}export{P as default};
