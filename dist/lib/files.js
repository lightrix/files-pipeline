import*as r from"fs";import{fileURLToPath as f}from"url";import{dirname as o}from"path";import u from"fast-glob";import p from"../options/index.js";import n from"./apply-to.js";import a from"./deepmerge.js";class g{paths=new Map;results=new Map;pipe={files:0,debug:2,info:{},current:{inputPath:"",outputPath:"",fileSizeAfter:0,fileSizeBefore:0,buffer:""}};constructor(t=2){this.pipe.debug=t}async in(t=!1){if(!t)return this;const s=n(n(t,i=>i instanceof URL?f(i):i),i=>i.endsWith("/")?i:`${i}/`);if(s instanceof Map)for(const[i,e]of s)this.paths.set(i,e);else this.paths.set(s,s);return this}async by(t=!1){if(!t)return this;for(const[s,i]of this.paths)for(const e of await u(t,{cwd:s,onlyFiles:!0}))this.results.set(`${i}${e}`,`${s}${e}`);return this}not(t){const s=new Set;if(typeof t<"u")if(t instanceof Array||t instanceof Set)for(const i of t)s.add(i);else s.add(t);for(const i of s){if(typeof i=="string")for(const e of this.results)(e[0].match(i)||e[1].match(i))&&this.results.delete(e[0]);if(typeof i=="function")for(const e of this.results)(i(e[0])||i(e[1]))&&this.results.delete(e[0])}return this}async apply(t=p.pipeline){t=a(p.pipeline,t);for(const[s,i]of this.results)try{if(this.pipe.current.inputPath=i,this.pipe.current.outputPath=s,this.pipe.current.fileSizeBefore=(await r.promises.stat(this.pipe.current.inputPath)).size,t.read&&t.wrote){this.pipe.current.buffer=await t.read(this.pipe.current);const e=await t.wrote(this.pipe.current);if(!e)return;if(this.pipe.current.buffer=e,t.passed&&await t.passed(this.pipe.current)){try{await r.promises.access(o(this.pipe.current.outputPath),r.constants.W_OK)}catch{await r.promises.mkdir(o(this.pipe.current.outputPath),{recursive:!0})}await r.promises.writeFile(this.pipe.current.outputPath,this.pipe.current.buffer,"utf-8"),this.pipe.current.fileSizeAfter=(await r.promises.stat(this.pipe.current.outputPath)).size,this.pipe.debug>0&&(this.pipe.files++,t.changed&&(this.pipe=await t.changed(this.pipe))),this.pipe.debug>1&&typeof t.accomplished=="function"&&console.log(await t.accomplished(this.pipe.current))}}}catch{this.results.delete(s),typeof t.failed=="function"&&console.log(await t.failed(i))}return this.pipe.debug>0&&this.results.size>0&&typeof t.fulfilled=="function"&&console.log(await t.fulfilled(this.pipe)),this}}export{g as default};
