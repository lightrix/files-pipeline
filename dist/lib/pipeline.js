import{fileURLToPath as p}from"url";import c from"../options/index.js";import h from"./apply-to.js";import r from"./format-bytes.js";import o from"./deepmerge.js";import a from"./files.js";import{minify as u}from"csso";import{minify as m}from"html-minifier-terser";import y from"sharp";import{optimize as w}from"svgo";import{minify as d}from"terser";import n from"../options/lib/compress/index.js";import b from"./vendor/sharp-read.js";import g from"critters";import l from"../options/lib/critters/index.js";class z{options;paths=new Set;constructor(s={}){this.options=s,this.mergeDefaultOptions(c)}mergeDefaultOptions(s){for(const i in this.options)Object.prototype.hasOwnProperty.call(s,i)&&this.options[i]===!0&&(this.options[i]=s[i]);if(this.options=o(s,this.options),typeof this.options.path<"u")if(this.options.path instanceof Array||this.options.path instanceof Set)for(const i of this.options.path)this.paths.add(i);else this.paths.add(this.options.path)}async process(){for(const s of this.paths)await(await(await new a(this.options.logger).in(s)).by(this.options.files)).not(this.options.exclude).apply(this.options.pipeline);return this}async compress(){this.mergeDefaultOptions(n);for(const[s,i]of Object.entries(this.options))if(!!i)for(const e of this.paths)switch(s){case"css":{await(await(await new a(this.options.logger).in(e)).by("**/*.css")).not(this.options.exclude).apply(o(n.pipeline,{wrote:async t=>u(t.buffer.toString(),i).css,fulfilled:async t=>t.files>0?`Successfully compressed a total of ${t.files} CSS ${t.files===1?"file":"files"} for ${await r(t.info.total)}.`:!1}));break}case"html":{await(await(await new a(this.options.logger).in(e)).by("**/*.html")).not(this.options.exclude).apply(o(n.pipeline,{wrote:async t=>await m(t.buffer.toString(),i),fulfilled:async t=>t.files>0?`Successfully compressed a total of ${t.files} HTML ${t.files===1?"file":"files"} for ${await r(t.info.total)}.`:!1}));break}case"js":{await(await(await new a(this.options.logger).in(e)).by("**/*.{js,mjs,cjs}")).not(this.options.exclude).apply(o(n.pipeline,{wrote:async t=>{const{code:f}=await d(t.buffer.toString(),i);return f||t.buffer},fulfilled:async t=>t.files>0?`Successfully compressed a total of ${t.files} JS ${t.files===1?"file":"files"} for ${await r(t.info.total)}.`:!1}));break}case"img":{await(await(await new a(this.options.logger).in(e)).by("**/*.{avci,avcs,avif,avifs,gif,heic,heics,heif,heifs,jfif,jif,jpe,jpeg,jpg,png,raw,tiff,webp}")).not(this.options.exclude).apply(o(n.pipeline,{wrote:async t=>await b(t.buffer,i),read:async t=>y(t.inputPath,{failOn:"none",sequentialRead:!0,unlimited:!0}),fulfilled:async t=>t.files>0?`Successfully compressed a total of ${t.files} IMG ${t.files===1?"file":"files"} for ${await r(t.info.total)}.`:!1}));break}case"svg":{await(await(await new a(this.options.logger).in(e)).by("**/*.svg")).not(this.options.exclude).apply(o(n.pipeline,{wrote:async t=>{const{data:f}=w(t.buffer.toString(),i);return typeof f<"u"?f:t.buffer},fulfilled:async t=>t.files>0?`Successfully compressed a total of ${t.files} SVG ${t.files===1?"file":"files"} for ${await r(t.info.total)}.`:!1}));break}default:break}return this}async critters(){this.mergeDefaultOptions(l);for(const s of this.paths){const i=h(s,t=>t instanceof URL?p(t):t),e=new g(o(this.options.critters,{path:i instanceof Map?i.keys().next().value:i,logLevel:(()=>{switch(this.options.logger){case 0:return"silent";case 1:return"silent";case 2:return"info";default:return"info"}})()}));await(await(await new a(this.options.logger).in(s)).by("**/*.html")).not(this.options.exclude).apply(o(l.pipeline,{wrote:async t=>e.process(t.buffer)}))}return this}}export{z as default};
