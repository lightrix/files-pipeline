import{fileURLToPath as c}from"url";import h from"../options/index.js";import m from"./apply-to.js";import p from"./format-bytes.js";import e from"./deepmerge.js";import n from"./files.js";import{minify as y}from"csso";import{minify as u}from"html-minifier-terser";import w from"sharp";import{optimize as d}from"svgo";import{minify as g}from"terser";import r from"./../options/lib/compress/index.js";import b from"./vendor/sharp-read.js";import O from"critters";import f from"../options/lib/critters/index.js";class q{options;paths=new Set;constructor(s={}){this.options=s,this.mergeDefaultOptions(h)}mergeDefaultOptions(s){for(const i in this.options)Object.prototype.hasOwnProperty.call(s,i)&&this.options[i]===!0&&(this.options[i]=s[i]);if(this.options=e(s,this.options),typeof this.options.path<"u")if(this.options.path instanceof Array||this.options.path instanceof Set)for(const i of this.options.path)this.paths.add(i);else this.paths.add(this.options.path)}async process(){for(const s of this.paths)await(await(await new n(this.options.logger).in(s)).by(this.options.files)).not(this.options.exclude).apply(this.options.pipeline);return this}async compress(){this.mergeDefaultOptions(r);for(const[s,i]of Object.entries(this.options))if(!!i)for(const a of this.paths)switch(s){case"css":{await(await(await new n(this.options.logger).in(a)).by("**/*.css")).not(this.options.exclude).apply(e(r.pipeline,{wrote:async(t,o)=>y(o,i).css,fulfilled:async t=>`Successfully compressed a total of ${t.files} CSS ${t.files===1?"file":"files"} for ${await p(t.info.total)}.`}));break}case"html":{await(await(await new n(this.options.logger).in(a)).by("**/*.html")).not(this.options.exclude).apply(e(r.pipeline,{wrote:async(t,o)=>await u(o,i),fulfilled:async t=>`Successfully compressed a total of ${t.files} HTML ${t.files===1?"file":"files"} for ${await p(t.info.total)}.`}));break}case"js":{await(await(await new n(this.options.logger).in(a)).by("**/*.{js,mjs,cjs}")).not(this.options.exclude).apply(e(r.pipeline,{wrote:async(t,o)=>(await g(o,i)).code,fulfilled:async t=>`Successfully compressed a total of ${t.files} JS ${t.files===1?"file":"files"} for ${await p(t.info.total)}.`}));break}case"img":{await(await(await new n(this.options.logger).in(a)).by("**/*.{avci,avcs,avif,avifs,gif,heic,heics,heif,heifs,jfif,jif,jpe,jpeg,jpg,png,raw,tiff,webp}")).not(this.options.exclude).apply(e(r.pipeline,{wrote:async(t,o)=>await b(o,i),read:async t=>w(t,{failOn:"none",sequentialRead:!0,unlimited:!0}),fulfilled:async t=>`Successfully compressed a total of ${t.files} IMG ${t.files===1?"file":"files"} for ${await p(t.info.total)}.`}));break}case"svg":{await(await(await new n(this.options.logger).in(a)).by("**/*.svg")).not(this.options.exclude).apply(e(r.pipeline,{wrote:async(t,o)=>{const l=d(o,i);if(typeof l.error<"u"&&console.error(l.error),typeof l.data<"u")return l.data},fulfilled:async t=>`Successfully compressed a total of ${t.files} SVG ${t.files===1?"file":"files"} for ${await p(t.info.total)}.`}));break}default:break}return this}async critters(){this.mergeDefaultOptions(f);for(const s of this.paths){const i=m(s,t=>t instanceof URL?c(t):t),a=new O(e(this.options.critters,{path:i instanceof Map?i.keys().next().value:i,logLevel:(()=>{switch(this.options.logger){case 0:return"silent";case 1:return"silent";case 2:return"info";default:return"info"}})()}));await(await(await new n(this.options.logger).in(s)).by("**/*.html")).not(this.options.exclude).apply(e(f.pipeline,{wrote:(t,o)=>a.process(o)}))}return this}}export{q as default};
