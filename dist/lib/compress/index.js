import{minify as c}from"csso";import{deepmerge as m}from"deepmerge-ts";import{minify as p}from"html-minifier-terser";import u from"sharp";import{optimize as y}from"svgo";import{minify as d}from"terser";import b from"../../options/lib/callbacks.js";import s from"../parse.js";import k from"../vendor/sharp-read.js";import f from"../format-bytes.js";const l=m(b,{failed:async a=>`Error: Cannot compress file ${a} !`,passed:async(a,e)=>a>Buffer.byteLength(e),accomplished:async(a,e,t,o)=>`\x1B[32mCompressed ${a} for ${await f(t-o)} (${((t-o)/t*100).toFixed(2)}% reduction) in ${e} .\x1B[39m`,fulfilled:async a=>`\x1B[32mSuccessfully compressed a total of ${a.files} ${a.type.toUpperCase()} ${a.files===1?"file":"files"} for ${await f(a.info.total)}.\x1B[39m`,changed:async a=>(a.info.total=(a.info.total?a.info.total:0)+(a.current.fileSizeBefore-a.current.fileSizeAfter),a)});var B=async(a,e,t=2)=>{for(const o in e)if(Object.prototype.hasOwnProperty.call(e,o)){const r=e[o];if(!r)continue;switch(o){case"css":{await s(a,"**/*.css",t,o,e?.exclude,()=>({...l,wrote:async i=>c(i,r).css}));break}case"html":{await s(a,"**/*.html",t,o,e?.exclude,()=>({...l,wrote:async i=>await p(i,r)}));break}case"js":{await s(a,"**/*.{js,mjs,cjs}",t,o,e?.exclude,()=>({...l,wrote:async i=>(await d(i,r)).code}));break}case"img":{await s(a,"**/*.{avci,avcs,avif,avifs,gif,heic,heics,heif,heifs,jfif,jif,jpe,jpeg,jpg,png,raw,tiff,webp}",t,o,e?.exclude,()=>({...l,wrote:async i=>await k(i,r),read:async i=>u(i,{failOn:"none",sequentialRead:!0,unlimited:!0})}));break}case"svg":{await s(a,"**/*.svg",t,o,e?.exclude,()=>({...l,wrote:async i=>{const n=y(i,r);if(typeof n.error<"u"&&console.log(n.error),typeof n.data<"u")return n.data}}));break}default:break}}};export{B as default};
