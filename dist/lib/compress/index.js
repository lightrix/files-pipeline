import{minify as m}from"csso";import{deepmerge as l}from"deepmerge-ts";import{minify as p}from"html-minifier-terser";import y from"sharp";import{optimize as u}from"svgo";import{minify as b}from"terser";import d from"./../../options/lib/callbacks.js";import t from"./../parse.js";import w from"./../vendor/sharp-read.js";import f from"./../format-bytes.js";const c=l(d,{error:async r=>`Error: Cannot compress file ${r} !`,check:async(r,a)=>r>Buffer.byteLength(a),success:async(r,a,o,e)=>`\x1B[32mCompressed ${r} for ${await f(o-e)} (${((o-e)/o*100).toFixed(2)}% reduction) in ${a} .\x1B[39m`,end:async r=>`\x1B[32mSuccessfully compressed a total of ${r.files} ${r.type.toUpperCase()} ${r.files===1?"file":"files"} for ${await f(r.info.total)}.\x1B[39m`});var P=async(r,a,o=2)=>{for(const e in a)if(Object.prototype.hasOwnProperty.call(a,e)){const i=a[e];if(!i)continue;switch(e){case"css":{await t(r,"**/*.css",o,e,a?.exclude,()=>({...c,write:async s=>m(s,i).css}));break}case"html":{await t(r,"**/*.html",o,e,a?.exclude,()=>({...c,write:async s=>await p(s,i)}));break}case"js":{await t(r,"**/*.{js,mjs,cjs}",o,e,a?.exclude,()=>({...c,write:async s=>(await b(s,i)).code}));break}case"img":{await t(r,"**/*.{avci,avcs,avif,avifs,gif,heic,heics,heif,heifs,jfif,jif,jpe,jpeg,jpg,png,raw,tiff,webp}",o,e,a?.exclude,()=>({...c,write:async s=>await w(s,i),read:async s=>y(s,{failOn:"none"})}));break}case"svg":{await t(r,"**/*.svg",o,e,a?.exclude,()=>({...c,write:async s=>{const n=u(s,i);if(typeof n.error<"u"&&console.log(n.error),typeof n.data<"u")return n.data}}));break}default:break}}};export{P as default};
