import{minify as f}from"csso";import{deepmerge as l}from"deepmerge-ts";import{minify as p}from"html-minifier-terser";import{optimize as y}from"svgo";import{minify as u}from"terser";import b from"./../../options/lib/callbacks.js";import c from"./../parse.js";import m from"./../format-bytes.js";const n=l(b,{error:async r=>`Error: Cannot compress file ${r} !`,check:async(r,a)=>r>Buffer.byteLength(a),success:async(r,a,s,e)=>`\x1B[32mCompressed ${r} for ${await m(s-e)} (${((s-e)/s*100).toFixed(2)}% reduction) in ${a} .\x1B[39m`,end:async r=>`\x1B[32mSuccessfully compressed a total of ${r.files} ${r.type.toUpperCase()} ${r.files===1?"file":"files"} for ${await m(r.info.total)}.\x1B[39m`});var g=async(r,a,s=2)=>{for(const e in a)if(Object.prototype.hasOwnProperty.call(a,e)){const t=a[e];if(!t)continue;switch(e){case"css":{await c(r,"**/*.css",s,e,a?.exclude,()=>({...n,write:async o=>f(o,t).css}));break}case"html":{await c(r,"**/*.html",s,e,a?.exclude,()=>({...n,write:async o=>await p(o,t)}));break}case"js":{await c(r,"**/*.{js,mjs,cjs}",s,e,a?.exclude,()=>({...n,write:async o=>(await u(o,t)).code}));break}case"svg":{await c(r,"**/*.svg",s,e,a?.exclude,()=>({...n,write:async o=>{const i=y(o,t);if(typeof i.error<"u"&&console.log(i.error),typeof i.data<"u")return i.data}}));break}default:break}}};export{g as default};
